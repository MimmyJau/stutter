(define report-result
  (lambda (result form)
    (prn (if result "pass" "FAIL") " ... " form)))

(defmacro check (form)
  `(report-result ~form '~form))

(define test-basics
  (lambda ()
    (do
      (check (= '() '())))))

(define test-arithmetic
  (lambda ()
    (do
      (check (= (+ 1 2) 3))
      (check (= (+ 5 (* 2 3)) 11))
      (check (= (- (+ 5 (* 2 3)) 3) 8))
      (check (= (/ (- (+ 5 (* 2 3)) 3) 4) 2))
      (check (= (/ (- (+ 515 (* 87 311)) 302) 27) 1010))
      (check (= (* -3 6) -18))
      (check (= (/ (- (+ 515 (* -87 311)) 296) 27) -994)))))

(define test-env
  (lambda ()
    (do
      (check (= (let (x 3 y 5) (- y x)) 2))
      (check (= (do (def! y0 (let (z 7) z)) y0) 7))
      (check (= (let (p (+ 2 3) q (+ 2 p)) (+ p q)) 12)))))

(define test-list
  (lambda ()
    (do
      (check (= (list) '()))
      (check (= (list? (list)) true))
      (check (= (empty? (list)) true))
      (check (= (empty? (list 1)) false))
      (check (= (list 1 2 3) '(1 2 3)))
      (check (= (count (list 1 2 3)) 3))
      (check (= (count nil) 0))
      (check (= (count (list)) 0)))))

(define fib
  (lambda (n)
    (if (= n 0)
      1
      (if (= n 1)
        1
        (+ (fib (- n 1)) (fib (- n 2)))))))

(define test-conditionals
  (lambda ()
    (do
      (check (= (fib 4) 5))
      (check (= (if true 1 2) 1))
      (check (= (if false 1 2) 2))
      (check (= (if "" 1 2) 1))
      (check (= (if false 1 false) false))
      (check (= (if true (+ 1 2) (+ 2 2)) 3))
      (check (= (if false (+ 1 2) (+ 2 2)) 4))
      (check (= (if nil 1 2) 2))
      (check (= (if 0 1 2) 1))
      (check (= (if (list) 1 2) 1))
      (check (= (if (list 0 1 2) 1 2) 1))
      (check (= (= (list) nil) false)))))

(define test-variadic-args
  (lambda ()
    (do
      (check (= true ((lambda (a & more) (list? more)) 1 2 3)))
      (check (= true ((lambda (a & more) (list? more)) 1)))
      (check (= true ((lambda (& more) (list? more)))))
      (check (= 0 ((lambda (& more) (count more)))))
      (check (= 0 ((lambda (a b c & more) (count more)) 1 2 3)))
      (check (= 3 ((lambda (& more) (count more)) 1 2 3))))))


(define test-equality
  (lambda ()
    (do
      (check (= (= 0 0) true))
      (check (= (= 1 1) true))
      (check (= (= 0 1) false))
      (check (= (= true true) true))
      (check (= (= false false) true))
      (check (= (= false nil) false))
      (check (= (= nil nil) true))
      (check (= (= (list) (list)) true))
      (check (= (= (list 0 1 2) (list 0 1 2)) true))
      (check (= (= (list 0 2 1) (list 0 1 2)) false))
      (check (= (= (list) (list 0 1 2)) false)))))

(define test-user-fns
  (lambda ()
    (do
      (check (= ((lambda (a b) (+ b a)) 3 4) 7))
      (check (= ((lambda () 2)) 2))
      (check (= ((lambda (f x) (f x)) (lambda (a) (+ 1 a)) 7) 8)))))

(define test-closures
  (lambda ()
    (do
      (check (= (((lambda (a) (lambda (b) (+ a b))) 5) 7) 12)))))

(define sum2 (lambda (n acc) (if (= n 0) acc (sum2 (- n 1) (+ n acc)))))
(define foo (lambda (n) (if (= n 0) 0 (bar (- n 1)))))
(define bar (lambda (n) (if (= n 0) 0 (foo (- n 1)))))

(define test-tco
  (lambda ()
    (do
      (check (= (foo 10) 0))
      (check (= (sum2 10 0) 55)))))

(test-basics)
(test-arithmetic)
(test-env)
(test-list)
(test-conditionals)
(test-variadic-args)
(test-equality)
(test-user-fns)
(test-closures)
(test-tco)
